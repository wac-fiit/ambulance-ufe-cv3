/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MsevcikAmbulanceWlApp {
        "basePath": string;
    }
    interface MsevcikAmbulanceWlEditor {
        "entryId": string;
    }
    interface MsevcikAmbulanceWlList {
    }
}
export interface MsevcikAmbulanceWlEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMsevcikAmbulanceWlEditorElement;
}
export interface MsevcikAmbulanceWlListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMsevcikAmbulanceWlListElement;
}
declare global {
    interface HTMLMsevcikAmbulanceWlAppElement extends Components.MsevcikAmbulanceWlApp, HTMLStencilElement {
    }
    var HTMLMsevcikAmbulanceWlAppElement: {
        prototype: HTMLMsevcikAmbulanceWlAppElement;
        new (): HTMLMsevcikAmbulanceWlAppElement;
    };
    interface HTMLMsevcikAmbulanceWlEditorElementEventMap {
        "editor-closed": string;
    }
    interface HTMLMsevcikAmbulanceWlEditorElement extends Components.MsevcikAmbulanceWlEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMsevcikAmbulanceWlEditorElementEventMap>(type: K, listener: (this: HTMLMsevcikAmbulanceWlEditorElement, ev: MsevcikAmbulanceWlEditorCustomEvent<HTMLMsevcikAmbulanceWlEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMsevcikAmbulanceWlEditorElementEventMap>(type: K, listener: (this: HTMLMsevcikAmbulanceWlEditorElement, ev: MsevcikAmbulanceWlEditorCustomEvent<HTMLMsevcikAmbulanceWlEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMsevcikAmbulanceWlEditorElement: {
        prototype: HTMLMsevcikAmbulanceWlEditorElement;
        new (): HTMLMsevcikAmbulanceWlEditorElement;
    };
    interface HTMLMsevcikAmbulanceWlListElementEventMap {
        "entry-clicked": string;
    }
    interface HTMLMsevcikAmbulanceWlListElement extends Components.MsevcikAmbulanceWlList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMsevcikAmbulanceWlListElementEventMap>(type: K, listener: (this: HTMLMsevcikAmbulanceWlListElement, ev: MsevcikAmbulanceWlListCustomEvent<HTMLMsevcikAmbulanceWlListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMsevcikAmbulanceWlListElementEventMap>(type: K, listener: (this: HTMLMsevcikAmbulanceWlListElement, ev: MsevcikAmbulanceWlListCustomEvent<HTMLMsevcikAmbulanceWlListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMsevcikAmbulanceWlListElement: {
        prototype: HTMLMsevcikAmbulanceWlListElement;
        new (): HTMLMsevcikAmbulanceWlListElement;
    };
    interface HTMLElementTagNameMap {
        "msevcik-ambulance-wl-app": HTMLMsevcikAmbulanceWlAppElement;
        "msevcik-ambulance-wl-editor": HTMLMsevcikAmbulanceWlEditorElement;
        "msevcik-ambulance-wl-list": HTMLMsevcikAmbulanceWlListElement;
    }
}
declare namespace LocalJSX {
    interface MsevcikAmbulanceWlApp {
        "basePath"?: string;
    }
    interface MsevcikAmbulanceWlEditor {
        "entryId"?: string;
        "onEditor-closed"?: (event: MsevcikAmbulanceWlEditorCustomEvent<string>) => void;
    }
    interface MsevcikAmbulanceWlList {
        "onEntry-clicked"?: (event: MsevcikAmbulanceWlListCustomEvent<string>) => void;
    }
    interface IntrinsicElements {
        "msevcik-ambulance-wl-app": MsevcikAmbulanceWlApp;
        "msevcik-ambulance-wl-editor": MsevcikAmbulanceWlEditor;
        "msevcik-ambulance-wl-list": MsevcikAmbulanceWlList;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "msevcik-ambulance-wl-app": LocalJSX.MsevcikAmbulanceWlApp & JSXBase.HTMLAttributes<HTMLMsevcikAmbulanceWlAppElement>;
            "msevcik-ambulance-wl-editor": LocalJSX.MsevcikAmbulanceWlEditor & JSXBase.HTMLAttributes<HTMLMsevcikAmbulanceWlEditorElement>;
            "msevcik-ambulance-wl-list": LocalJSX.MsevcikAmbulanceWlList & JSXBase.HTMLAttributes<HTMLMsevcikAmbulanceWlListElement>;
        }
    }
}
